When would you want to use a remote repository rather than keeping all your work 
local?

A remote repository is useful if you want to share files between users who can't 
share the same computer. Another use for a remote repository is if you want to be 
able to access your work from multiple computers or work sites.

Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

You wouldn't want Git to automatically pull from the remote repository in case
someone else added or removed something that would interfere with the work you
were doing in your working directory.

Describe the differences between forks, clones, and branches. When would you use 
one instead of another?

A branch is a separate "version" of a project where both exist on the same local
directory. A clone is a duplicate of a repository from a remote directory to a local
directory, or from one local directory to another. A fork is like a clone, but the
original repository and the clone both exist on GitHub. Typically, a fork is used
when you want to modify an existing repository that may belong to someone else. So
you don't want to change their version, but you also want your version to point back
to the original one.

What is the benefit of having a copy of the last known state of the remote stored 
locally?

It's useful to have a copy of the last known state of the remote stored locally so
you can see everyone else's changes (if you're working collaboratively). It's also
useful to have for your own reference, so you know what changes are currently public.

How would you collaborate without using Git or GitHub? What would be easier, and 
what would be harder?

Without using Git or GitHub, you would have to find another way to log your changes
and let your collaborators know about each one when it's made. You could just write
an email to your collaborators detailing every change you make, and have them email
you when they make changes. But doing that manually could get tedious. Plus, if you
wanted to quickly refer to a list of all changes, you'd have to make one yourself
(in a spreadsheet, most likely). GitHub makes all of this record-keeping much easier
by doing it all automatically. The trade-off is that there are more steps to save
changes and implement them in the live project.